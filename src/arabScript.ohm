arabScript {
    Program               = Statement*
    Statement             = varKeyword id "="  Exp "؛"                                              --varDecInit
                            | ("دع" | "متغير") id "؛"                                               --varDec
                            | (This | Var ) "=" Exp "؛"   										    --assignExp
                            | ("دع" | "متغير") ListOf<IndividualDec, "،"> "؛"                       --multDec
                            | "ثابت" ListOf<IndividualConstDec, "،"> "؛"                            --multDecConst
                            | SwitchStatement
                            | ClassDec
                         	| FunctionCall "؛" 														--functionCall 
                            | ReturnStatement "؛" 													--return
                         	| FunctionDec
                            | IfStatement
                            | WhileStatement
                            | ForStatement
                            | Print "؛"                                                             --print
                            | SliceCrement "؛"                                                      --slice
                            | continue "؛" 															--continue
                            | break "؛" 															--break
                            | Exp "؛" 																--exp
    BeginToEnd			  = "{" Statement* "}"
    IndividualDec         = id (IndividualDecEq)?
    IndividualDecEq       = "=" Exp
    IndividualConstDec    = id "=" Exp
    ClassDec			  = classKeyword id "{" Constructor? Statement* "}"
    This                  = Var thisKeyword 
    Constructor			  = constructorKeyword "(" Parameters ")" BeginToEnd
    FunctionCall          = (This | Var ) "(" Arguments ")"
    FunctionDec           = functionKeyword id "(" Parameters ")" BeginToEnd
    ReturnStatement       = returnKeyword Exp?
    IfStatement			  = ifKeyword "(" Exp ")" BeginToEnd ElseifStatement* ElseStatement?
    ElseifStatement       = elseifKeyword "(" Exp ")" BeginToEnd
    ElseStatement         = elseKeyword BeginToEnd

    WhileStatement        = whileKeyword "(" Exp ")" BeginToEnd

	ForStatement          = forKeyword "(" ForArgs ")" BeginToEnd									 --forArgs
    					  | forKeyword "(" id Var ")" BeginToEnd									 --forOf
    ForArgs               = varKeyword id "=" Exp "؛" Exp "؛" SliceCrement
    SliceCrement          = (id "+=" AddOp | id "-=" AddOp )                                         --binary
                            | (id"++" | id"--" )                                                     --postfix
    SwitchStatement       = switchKeyword "("Var")" "{" Case+ Defaultcase? "}"
    Case             	  = caseKeyword Exp ":" Statement*
    Defaultcase           = defaultKeyword ":" Statement*

    Print                 = printKeyword "("Exp")"
    TypeOf                = typeofKeyword "("Exp")"

    Exp                   = Exp "؟" Log ":" Log                                                      --ternary
                            | Log
    Log                   = Log logop Joint                                                          --binary
                            | Joint
    Joint                 = Joint relop AddOp                                                        --binary
                            | AddOp
    AddOp                 = AddOp addop Term                                                         --binary
                            | Term
    Term                  = Term mulop Exponential                                                   --binary
                            | Exponential
    Exponential           = Factor "**" Exponential                                                   --binary
                            | Factor
    Factor                = TypeOf
                            | id "(" Arguments ")" newKeyword                                        --newObj
                            | FunctionCall
							| ("-") Factor                                                          --negation
                            | ("!") Factor                                                           --boolNegation
                            | "(" Exp ")"                                                            --parens
                            | "[" Arguments "]"                                                      --arrayLit
                            | "{" DictValues "}" 													 --objLit
                            | numlit
                            | stringlit
                            | boollit
                            | nullKeyword
                            | undefinedKeyword
                            | This
                            | Var
    digit				  += "١"|"٧"|"٦"|"٥"|"٤"|"٣"|"٢"|"٩"|"٠"
    numlit                = digit+ "." digit+                                                        --float
                            | digit+                                                                 --int
    boollit               = "صح" | "خطا"
    stringlit             = "\"" char* "\""
    char                  = "\\n"
                            | "\\'"
                            | "\\\""
                            | "\\\\"
                            | "\\u{" hexDigit hexDigit? hexDigit? hexDigit? hexDigit? hexDigit?  "}"  --hex
                            | ~"\"" ~"\\" any
    Var                   = Property
    						| id
    Property              = Var "." Var                                                               --dotMemberExp
                            | Var "["Exp"]" 														  --memberExp
    varKeyword            = "دع" | "ثابت" | "متغير"
    keyword               = varKeyword | boollit | break | caseKeyword | defaultKeyword | elseKeyword
                            | elseifKeyword | forKeyword | functionKeyword | ifKeyword | returnKeyword
                            | switchKeyword | whileKeyword | continue | classKeyword | constructorKeyword
                            | thisKeyword | nullKeyword | undefinedKeyword | newKeyword
                            | printKeyword | typeofKeyword
    id                    = ~keyword letter (alnum | "&")*


    break                 = "قف" ~alnum
    continue              = "استمر" ~alnum
    classKeyword		  = "صنف" ~alnum
    newKeyword            = "جديد" ~alnum
    thisKeyword		      = "هذا" ~alnum
    constructorKeyword    = "منشئ" ~alnum
    caseKeyword           = "حالة" ~alnum
    defaultKeyword        = "خلاف ذلك" ~alnum
    elseKeyword           = "آخر" ~alnum
    elseifKeyword         = "ولو" ~alnum
    forKeyword            = "ل" ~alnum
    functionKeyword       = "دالة" ~alnum
    ifKeyword             = "لو" ~alnum
    returnKeyword         = "عد" ~alnum
    switchKeyword         = "تبديل" ~alnum
    whileKeyword          = "بينما" ~alnum
    nullKeyword           = "نل" ~alnum
    undefinedKeyword      = "مجهول" ~alnum
    printKeyword          = "طبع" ~alnum
    typeofKeyword         = "نوع" ~alnum


    Arguments             = ListOf<Exp, "،">
    Parameters            = ListOf<id, "،">
    DictValues            = ListOf<KeyValue, "،">
    KeyValue              = Exp ":" Exp

    space                 += "//" (~"\n" any)* ("\n" | end)                                             --comment
    logop                 = "&&" | "||"
    relop                 = "<=" | "<" | "==" | "!=" | ">=" | ">"
    addop                 = "+" | "-"
    mulop                 = "*"| "/"| "%"| "٪"
  }